Array Operations in C
Here's a detailed look at different operations you can perform on arrays in C,
complete with code examples and explanations:
1. Array Creation
Creating an array involves declaring the array and specifying its size and type.
#include <stdio.h>
int main() {
int arr[5] = {1, 2, 3, 4, 5}; // Declaration and initialization
return 0;
}
2. Accessing Elements
Access elements using their index.
#include <stdio.h>
int main() {
int arr[5] = {1, 2, 3, 4, 5};
int value = arr[2]; // Accessing the third element, value is 3
printf("Element at index 2: %d\n", value);
return 0;
}
3. Modifying Elements
Change the value of elements by accessing them via their index.
#include <stdio.h>
int main() {
int arr[5] = {1, 2, 3, 4, 5};
arr[2] = 10; // Modifying the third element
printf("Modified element at index 2: %d\n", arr[2]);
return 0;
}
4. Traversing Arrays
Iterate through the array elements using loops.
#include <stdio.h>
int main() {
int arr[5] = {1, 2, 3, 4, 5};
for(int i = 0; i < 5; i++) {
printf("%d ", arr[i]);
}
return 0;
}
5. Insertion
Insert an element into the array. In C, you must manually manage the array size
and shift elements.
#include <stdio.h>
void insert(int arr[], int n, int index, int value) {
for (int i = n; i > index; i--) {
arr[i] = arr[i - 1];
}
arr[index] = value;
}
int main() {
int arr[6] = {1, 2, 3, 4, 5};
int n = 5; // Current size of the array
insert(arr, n, 2, 10); // Insert 10 at index 2
n++;
for(int i = 0; i < n; i++) {
printf("%d ", arr[i]);
}
return 0;
}
6. Deletion
Remove an element from the array, shifting the remaining elements if
necessary.
#include <stdio.h>
void delete(int arr[], int n, int index) {
for (int i = index; i < n - 1; i++) {
arr[i] = arr[i + 1];
}
}
int main() {
int arr[5] = {1, 2, 3, 4, 5};
int n = 5; // Current size of the array
delete(arr, n, 2); // Delete element at index 2
n--;
for(int i = 0; i < n; i++) {
printf("%d ", arr[i]);
}
return 0;
}
7. Searching
Find the index of a specific element in the array.
#include <stdio.h>
int search(int arr[], int n, int x) {
for (int i = 0; i < n; i++) {
if (arr[i] == x) {
return i;
}
}
return -1; // Element not found
}
int main() {
int arr[5] = {1, 2, 3, 4, 5};
int index = search(arr, 5, 3); // Search for element 3
if(index != -1) {
printf("Element found at index: %d\n", index);
} else {
printf("Element not found\n");
}
return 0;
}
8. Sorting
Arrange the elements of the array in a particular order using bubble sort as an
example.
#include <stdio.h>
void bubbleSort(int arr[], int n) {
for (int i = 0; i < n - 1; i++) {
for (int j = 0; j < n - i - 1; j++) {
if (arr[j] > arr[j + 1]) {
int temp = arr[j];
arr[j] = arr[j + 1];
arr[j + 1] = temp;
}
}
}
}
int main() {
int arr[5] = {5, 3, 2, 4, 1};
int n = 5;
bubbleSort(arr, n);
for(int i = 0; i < n; i++) {
printf("%d ", arr[i]);
}
return 0;
}
9. Merging
Combine two arrays into one.
#include <stdio.h>
void merge(int arr1[], int n1, int arr2[], int n2, int merged[]) {
for (int i = 0; i < n1; i++) {
merged[i] = arr1[i];
}
for (int i = 0; i < n2; i++) {
merged[n1 + i] = arr2[i];
}
}
int main() {
int arr1[3] = {1, 2, 3};
int arr2[3] = {4, 5, 6};
int merged[6];
merge(arr1, 3, arr2, 3, merged);
for(int i = 0; i < 6; i++) {
printf("%d ", merged[i]);
}
return 0;
}
10. Reversing
Reverse the order of the elements in the array.
#include <stdio.h>
void reverseArray(int arr[], int n) {
int start = 0, end = n - 1;
while (start < end) {
int temp = arr[start];
arr[start] = arr[end];
arr[end] = temp;
start++;
end--;
}
}
int main() {
int arr[5] = {1, 2, 3, 4, 5};
int n = 5;
reverseArray(arr, n);
for(int i = 0; i < n; i++) {
printf("%d ", arr[i]);
}
return 0;
}
These operations demonstrate basic manipulations of arrays in C. Adjustments
and enhancements can be made depending on specific use cases and constraints.